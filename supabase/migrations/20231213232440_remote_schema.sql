
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "moddatetime" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."MuscleGroup" (
    "MuscleGroupId" bigint NOT NULL,
    "DateCreated" timestamp with time zone DEFAULT "now"() NOT NULL,
    "DateUpdated" timestamp with time zone DEFAULT "now"() NOT NULL,
    "Name" character varying DEFAULT ''::character varying NOT NULL
);

ALTER TABLE "public"."MuscleGroup" OWNER TO "postgres";

ALTER TABLE "public"."MuscleGroup" ALTER COLUMN "MuscleGroupId" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."MuscleGroup_MuscleGroupId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."Workout" (
    "WorkoutId" bigint NOT NULL,
    "DateCreated" timestamp with time zone DEFAULT "now"() NOT NULL,
    "DateUpdated" timestamp with time zone DEFAULT "now"() NOT NULL,
    "Name" character varying DEFAULT ''::character varying NOT NULL,
    "MaxWeight" bigint NOT NULL,
    "WorkoutDate" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."Workout" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."WorkoutToMuscleGroup" (
    "WorkoutToMuscleGroupId" bigint NOT NULL,
    "DateCreated" timestamp with time zone DEFAULT "now"() NOT NULL,
    "DateUpdated" timestamp with time zone DEFAULT "now"() NOT NULL,
    "WorkoutId" bigint NOT NULL,
    "MuscleGroupId" bigint NOT NULL
);

ALTER TABLE "public"."WorkoutToMuscleGroup" OWNER TO "postgres";

ALTER TABLE "public"."WorkoutToMuscleGroup" ALTER COLUMN "WorkoutToMuscleGroupId" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."WorkoutToMuscleGroup_WorkoutToMuscleGroupId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."Workout" ALTER COLUMN "WorkoutId" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Workout_WorkoutId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."MuscleGroup"
    ADD CONSTRAINT "MuscleGroup_Name_key" UNIQUE ("Name");

ALTER TABLE ONLY "public"."MuscleGroup"
    ADD CONSTRAINT "MuscleGroup_pkey" PRIMARY KEY ("MuscleGroupId");

ALTER TABLE ONLY "public"."WorkoutToMuscleGroup"
    ADD CONSTRAINT "WorkoutToMuscleGroup_pkey" PRIMARY KEY ("WorkoutToMuscleGroupId");

ALTER TABLE ONLY "public"."Workout"
    ADD CONSTRAINT "Workout_pkey" PRIMARY KEY ("WorkoutId");

CREATE OR REPLACE TRIGGER "date_updated_muscle_group" BEFORE UPDATE ON "public"."MuscleGroup" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('DateUpdated');

CREATE OR REPLACE TRIGGER "date_updated_workout" BEFORE UPDATE ON "public"."Workout" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('DateUpdated');

CREATE OR REPLACE TRIGGER "date_updated_workout_to_muscle_group" BEFORE UPDATE ON "public"."WorkoutToMuscleGroup" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('DateUpdated');

ALTER TABLE ONLY "public"."WorkoutToMuscleGroup"
    ADD CONSTRAINT "WorkoutToMuscleGroup_MuscleGroupId_fkey" FOREIGN KEY ("MuscleGroupId") REFERENCES "public"."MuscleGroup"("MuscleGroupId") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."WorkoutToMuscleGroup"
    ADD CONSTRAINT "WorkoutToMuscleGroup_WorkoutId_fkey" FOREIGN KEY ("WorkoutId") REFERENCES "public"."Workout"("WorkoutId") ON UPDATE CASCADE ON DELETE CASCADE;

CREATE POLICY "Enable read access for all users" ON "public"."MuscleGroup" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."Workout" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."WorkoutToMuscleGroup" FOR SELECT USING (true);

ALTER TABLE "public"."MuscleGroup" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."Workout" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."WorkoutToMuscleGroup" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."MuscleGroup" TO "anon";
GRANT ALL ON TABLE "public"."MuscleGroup" TO "authenticated";
GRANT ALL ON TABLE "public"."MuscleGroup" TO "service_role";

GRANT ALL ON SEQUENCE "public"."MuscleGroup_MuscleGroupId_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."MuscleGroup_MuscleGroupId_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."MuscleGroup_MuscleGroupId_seq" TO "service_role";

GRANT ALL ON TABLE "public"."Workout" TO "anon";
GRANT ALL ON TABLE "public"."Workout" TO "authenticated";
GRANT ALL ON TABLE "public"."Workout" TO "service_role";

GRANT ALL ON TABLE "public"."WorkoutToMuscleGroup" TO "anon";
GRANT ALL ON TABLE "public"."WorkoutToMuscleGroup" TO "authenticated";
GRANT ALL ON TABLE "public"."WorkoutToMuscleGroup" TO "service_role";

GRANT ALL ON SEQUENCE "public"."WorkoutToMuscleGroup_WorkoutToMuscleGroupId_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."WorkoutToMuscleGroup_WorkoutToMuscleGroupId_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."WorkoutToMuscleGroup_WorkoutToMuscleGroupId_seq" TO "service_role";

GRANT ALL ON SEQUENCE "public"."Workout_WorkoutId_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Workout_WorkoutId_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Workout_WorkoutId_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
